/**
 * This file was generated using 8base CLI.
 *
 * To learn more about writing custom trigger functions, visit
 * the 8base documentation at:
 *
 * https://docs.8base.com/docs/8base-console/custom-functions/triggers/
 *
 * To update this functions invocation settings, update its configuration block
 * in the projects 8base.yml file:
 *  functions:
 *    <%= functionName %>:
 *      ...
 *
 * Data that is sent to the function can be accessed on the event argument at:
 *  event.data[KEY_NAME]
 *
 * There are two ways to invoke this function locally:
 *
 *  (1) Explicit file mock file path using '-p' flag:
 *    8base invoke-local <%= functionName %> -p src/resolvers/<%= functionName %>/mocks/request.json
 *
 *  (2) Default mock file location using -m flag:
 *    8base invoke-local <%= functionName %> -m request
 *
 *  Add new mocks to this function to test different input arguments. Mocks can easily be generated
 *  the following generator command:
 *    8base generate mock <%= functionName %> -m [MOCK_FILE_NAME]
 */

import { FunctionContext, BeforeCreateTriggerFunctionEvent, TriggerResponse } from '@8base/functions-types';

export default (
  event: BeforeCreateTriggerFunctionEvent<UserData>,
  ctx: FunctionContext,
): TriggerResponse<UserData, TriggerError> => {
  const { data } = event;

  return {
    data: {
      ...data,
      firstName: 'Override firstName',
    },

    /**
     * Triggers allow for errors to be specified in the response
     * as an array of user defined objects.
     *
     * Example:
     *
     * [{
     *  message: "Error message",
     *  code: "error_code"
     * }, ...]
     */
    errors: [],
  };
};

type UserData = {
  email: string;
  lastName?: string;
  firstName?: string;
};

type TriggerError = {
  code: string;
  message: string;
};
