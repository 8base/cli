/**
 * This file was generated using 8base CLI.
 *
 * To learn more about writing custom task functions, visit
 * the 8base documentation at:
 *
 * https://docs.8base.com/projects/backend/custom-functions/tasks
 *
 * To update this functions invocation settings, update its configuration block
 * in the projects 8base.yml file:
 *  functions:
 *    <%= functionName %>:
 *      ...
 *
 * Data that is sent to the function can be accessed on the event argument at:
 *  event[KEY_NAME]
 *
 * There are two ways to invoke this function locally:
 *
 *  (1) Explicit file mock file path using '-p' flag:
 *    8base invoke-local <%= functionName %> -p src/resolvers/<%= functionName %>/mocks/request.json
 *
 *  (2) Default mock file location using -m flag:
 *    8base invoke-local <%= functionName %> -m request
 *
 *  Add new mocks to this function to test different input arguments. Mocks can easily be generated
 *  the following generator command:
 *    8base generate mock <%= functionName %> -m [MOCK_FILE_NAME]
 */

import { FunctionContext, TaskEvent, TaskResponse, TaskFunction } from "@8base/functions-types";

type TaskInput = TaskEvent<{ foo: string }>;
type TaskOutput = TaskResponse<{ result: string }>;

const task: TaskFunction = async (event: TaskInput, ctx: FunctionContext): TaskOutput => {
  return {
    result: `Task received: ${event.foo}`,
  };
};

export default task;
