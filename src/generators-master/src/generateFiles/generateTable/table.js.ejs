import React from 'react';
import gql from 'graphql-tag';
import objectPath from 'object-path';
import { graphql, compose } from 'react-apollo';
import { DateTime } from 'luxon';
import { TableBuilder, Dropdown, Icon, Menu, Link, Tag, Row, withModal } from '@8base/boost';
import { FIELD_TYPE, SMART_FORMATS, FILE_FORMATS, DATE_FORMATS, SWITCH_FORMATS, SWITCH_VALUES } from '@8base/utils';

const <%= changeCase.upper(screenName)%>_LIST_QUERY = gql`
<%= queryText%>
`;

const TABLE_COLUMNS = [<% 
columns.forEach((column) => { %>
  {
    name: '<%= column.name%>',
    title: '<%= column.title%>',
    meta: {
      isList: <%= column.meta.isList%>,
      fieldType: FIELD_TYPE.<%= column.meta.fieldType%>,
      fieldTypeAttributes: {
        format: '<%= column.meta.fieldTypeAttributes && column.meta.fieldTypeAttributes.format%>',
      },
    },
  },<%
}); %>
  {
    name: 'edit',
    title: '',
    width: '60px',
  },
];

const enhancer = compose(
  withModal,
  graphql(<%= changeCase.upper(screenName)%>_LIST_QUERY, { name: '<%= changeCase.lower(tableName)%>' })
);

const <%= changeCase.pascal(screenName)%>Table = enhancer(
  class <%= changeCase.pascal(screenName)%>Table extends React.PureComponent {
    renderEdit = rowData => (
      <Dropdown defaultOpen={false}>
        <Dropdown.Head>
          <Icon name="More" size="sm" color="LIGHT_GRAY2" />
        </Dropdown.Head>
        <Dropdown.Body pin="right">
          {({ closeDropdown }) => (
            <Menu>
              <Menu.Item
                onClick={() => {
                  this.props.openModal('<%= changeCase.upper(entityName)%>_EDIT_DIALOG_ID', { id: rowData.id });
                  closeDropdown();
                }}
              >
                Edit
              </Menu.Item>
              <Menu.Item
                onClick={() => {
                  this.props.openModal('<%= changeCase.upper(entityName)%>_DELETE_DIALOG_ID', { id: rowData.id });
                  closeDropdown();
                }}
              >
                Delete
              </Menu.Item>
            </Menu>
          )}
        </Dropdown.Body>
      </Dropdown>
    );

    renderItems = (column, rowData, handler) => {
      const dataPath = column.name.split('.');
      const cellData = objectPath.get(rowData, dataPath) || '';

      if (column.meta.isList) {
        const itemsArray = cellData.items ? cellData.items : cellData;

        return (
          <Row style={{ flexWrap: 'wrap' }}>
            {itemsArray && itemsArray.map(item => !!item && <Tag color="LIGHT_GRAY2">{handler(item)}</Tag>)}
          </Row>
        );
      } else {
        return cellData && <div>{handler(cellData)}</div>;
      }
    };

    <% if(tableSelectors.hasScalarFields(table)) {%>
      renderScalar = (column, rowData) => {
        return this.renderItems(column, rowData, item => item);
      };
    <% }; %>

    <% if(tableSelectors.hasDateFields(table)) {%>
      renderDate = (column, rowData) => {
        const dateFormat =
          column.meta.fieldTypeAttributes.format === DATE_FORMATS.DATE ? DateTime.DATE_SHORT : DateTime.DATETIME_SHORT;

        return this.renderItems(column, rowData, item => DateTime.fromISO(item).toLocaleString(dateFormat));
      };
    <% }; %>

    <% if(tableSelectors.hasSwitchFields(table)) {%>
      renderSwitch = (column, rowData) => {
        if (column.meta.fieldTypeAttributes.format === SWITCH_FORMATS.CUSTOM) {
          return this.renderItems(column, rowData, item => item);
        } else {
          return this.renderItems(column, rowData, item => SWITCH_VALUES[column.meta.fieldTypeAttributes.format][item]);
        }
      };
    <% }; %>

    <% if(tableSelectors.hasRelationFields(table)) {%>
      renderRelation = (column, rowData) => {
        const dataPath = column.name.split('.');

        if (column.meta.isList) {
          return objectPath.get(rowData, [...dataPath, 'count']) || '';
        } else {
          return objectPath.get(rowData, [...dataPath, '_description']) || '';
        }
      };
    <% }; %>

    <% if(tableSelectors.hasFileFields(table)) {%>
      renderFile = (column, rowData) => {
        if (column.meta.fieldTypeAttributes.format === FILE_FORMATS.IMAGE && !column.meta.isList) {
          const cellData = objectPath.get(rowData, column.name.split('.'));

          return cellData && <img src={cellData.downloadUrl} alt="filename" style={{ width: '5rem' }} />;
        } else {
          return this.renderItems(column, rowData, item => (
            <div>
              <Link key={item.downloadUrl} target="_blank" href={item.downloadUrl} size="sm">
                {item.filename}
              </Link>
            </div>
          ));
        }
      };
    <% }; %>

    <% if(tableSelectors.hasSmartFields(table)) {%>
      renderSmart = (column, rowData) => {
        return this.renderItems(column, rowData, item => {
          if (column.meta.fieldTypeAttributes.format === SMART_FORMATS.ADDRESS) {
            const address = [item.street1, item.street2, item.city, item.state, item.zip].filter(item => !!item);

            return join(', ', address);
          } else if (column.meta.fieldTypeAttributes.format === SMART_FORMATS.PHONE) {
            const phone = [item.code, item.number].filter(item => !!item);

            return join(' ', phone);
          }
        });
      };
    <% }; %>

    renderCell = (column, rowData) => {
      if (column.name === 'edit') {
        return this.renderEdit(rowData);
      }

      switch (column.meta.fieldType) {
        <% if(tableSelectors.hasScalarFields(table)) {%>
          case FIELD_TYPE.TEXT:
          case FIELD_TYPE.NUMBER:
            return this.renderScalar(column, rowData);
        <% }; %>
        <% if(tableSelectors.hasDateFields(table)) {%>
          case FIELD_TYPE.DATE:
            return this.renderDate(column, rowData);
        <% }; %>
        <% if(tableSelectors.hasSwitchFields(table)) {%>
          case FIELD_TYPE.SWITCH:
            return this.renderSwitch(column, rowData);
        <% }; %>
        <% if(tableSelectors.hasFileFields(table)) {%>
          case FIELD_TYPE.FILE:
            return this.renderFile(column, rowData);
        <% }; %>
        <% if(tableSelectors.hasRelationFields(table)) {%>
          case FIELD_TYPE.RELATION:
            return this.renderRelation(column, rowData);
        <% }; %>
        <% if(tableSelectors.hasSmartFields(table)) {%>
          case FIELD_TYPE.SMART:
            return this.renderSmart(column, rowData);
        <% }; %>
          default:
            return null;
      }
    };

    openCreateModal = () => {
      const { openModal } = this.props;

      openModal('<%= changeCase.upper(entityName)%>_CREATE_DIALOG_ID');
    };

    render() {
      const { <%= changeCase.lower(tableName)%> } = this.props;
      const tableData = objectPath.get(<%= changeCase.lower(tableName)%>, ['<%= SchemaNameGenerator.getTableListFieldName(tableName)%>', 'items']) || [];

      return (
        <TableBuilder
          loading={<%= changeCase.lower(tableName)%>.loading}
          data={tableData}
          columns={TABLE_COLUMNS}
          action="Create <%= changeCase.pascal(entityName)%>"
          renderCell={this.renderCell}
          onActionClick={this.openCreateModal}
        />
      );
    }
  }
);

export { <%= changeCase.pascal(screenName)%>Table };
