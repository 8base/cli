import React from 'react';
import gql from 'graphql-tag';
import { Query, graphql } from 'react-apollo';
import { Form as FormLogic, Field, FieldArray } from '@8base/forms';
import {
  Dialog,
  Grid,
  Button,
  Form,
  Row,
  Column,
  Icon,
  Text,
  SelectField,
  InputField,
  CheckboxField,
  DateInputField,
  Label,
  ModalContext,
} from '@8base/boost';
import { AddressInputField, PhoneInputField, ListFields, FileInputField } from '../../shared/components'

const <%= changeCase.upper(entityName)%>_CREATE_MUTATION = gql`
  mutation <%= changeCase.pascal(entityName)%>Create($data: <%= SchemaNameGenerator.getCreateInputName(tableName)%>!) {
    <%= SchemaNameGenerator.getCreateItemFieldName(tableName)%>(data: $data) {
      id
    }
  }
`;

<%- chunks.createEditComponents({
    fields: fields,
    SchemaNameGenerator: SchemaNameGenerator,
    changeCase: changeCase,
    chunks: chunks,
    tableSelectors: tableSelectors,
    table: table,
}); %>
const enhancer = graphql(<%= changeCase.upper(entityName)%>_CREATE_MUTATION, {
  name: '<%= SchemaNameGenerator.getCreateItemFieldName(tableName)%>',
  options: {
    refetchQueries: ['<%=changeCase.pascal(tableName)%>TableContent', '<%= changeCase.pascal(SchemaNameGenerator.getTableListFieldName(tableName))%>'],
    context: {
      TOAST_SUCCESS_MESSAGE: '<%= changeCase.pascal(entityName)%> successfully created',
    },
  },
});

const <%= changeCase.pascal(entityName)%>CreateDialog = enhancer(
  class <%= changeCase.pascal(entityName)%>CreateDialog extends React.PureComponent {
    static contextType = ModalContext;

    onSubmit = async data => {
      await this.props.<%= SchemaNameGenerator.getCreateItemFieldName(tableName)%>({ variables: { data } });

      this.context.closeModal('<%= changeCase.upper(entityName)%>_CREATE_DIALOG_ID');
    };

    onClose = () => {
      this.context.closeModal('<%= changeCase.upper(entityName)%>_CREATE_DIALOG_ID');
    };

    renderFormContent = ({ handleSubmit, invalid, submitting, pristine }) => (
      <form onSubmit={handleSubmit}>
        <Dialog.Header title="New <%= changeCase.pascal(entityName)%>" onClose={this.onClose} />
        <Dialog.Body scrollable>
          <Grid.Layout gap="md" stretch><%-
            chunks.fieldsInputsList({ 
              fields: fields, 
              chunks: chunks,
              changeCase: changeCase,
              pluralize: pluralize,
              SchemaNameGenerator: SchemaNameGenerator,
            });%>
          </Grid.Layout>
        </Dialog.Body>
        <Dialog.Footer>
          <Button color="neutral" type="button" variant="outlined" disabled={submitting} onClick={this.onClose}>
            Cancel
          </Button>
          <Button color="primary" type="submit" loading={submitting}>
            Create <%= changeCase.pascal(entityName)%>
          </Button>
        </Dialog.Footer>
      </form>
    );

    render() {
      return (
        <Dialog id={'<%= changeCase.upper(entityName)%>_CREATE_DIALOG_ID'} size="sm">
          <FormLogic type="CREATE" tableSchemaName="<%= tableName%>" onSubmit={this.onSubmit} formatRelationToIds>
            {this.renderFormContent}
          </FormLogic>
        </Dialog>
      );
    }
  }
);

export { <%= changeCase.pascal(entityName)%>CreateDialog };
